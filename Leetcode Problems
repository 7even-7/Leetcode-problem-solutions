#Add_Two_sums
#Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

#You may assume that each input would have exactly one solution, and you may not use the same element twice.

#You can return the answer in any order.
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        i = 0
        while i != len(nums) - 1:
            n = nums[i+1:]
            for v in range(len(n)):
                if nums[i] + n[v] == target:
                    print(nums[i], n[v], i, v)
                    return [i, v+i+1]
            i += 1

#Reverse Integer
#Given a 32-bit signed integer, reverse digits of an integer.

#Note:
#Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

 
class Solution(object):
    def reverse(self, x):
        
        """
        :type x: int
        :rtype: int
        """

        if x > 0:
            inte = int(str(x)[::-1])
            if -2**31 <= inte <= 2**31 -1:
                return inte
            else:
                return 0
        elif x == 0:
            return 0
        else:
            temp = '-' + str(x)[1:][::-1]
            if -2**31 <= int(temp) <= 2**31-1:
                return int(temp)
            else:
                return 0
